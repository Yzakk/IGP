from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split

data = pd.read_csv('C:/Users/youse/IGP/simulated_data.csv')

data['Date'] = pd.to_datetime(data['Date']) 
data['Year'] = data['Date'].dt.year  
data['Month'] = data['Date'].dt.month  
data['Day'] = data['Date'].dt.day 

X = data[['Year', 'Month', 'Day']].values 
y = data['Price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

results = {}
kernels = ['linear', 'poly', 'rbf', 'sigmoid']

for kernel in kernels:
    model = make_pipeline(StandardScaler(), SVR(kernel=kernel, C=100, gamma=0.1, epsilon=0.1))

    model.fit(X_train, y_train)
    predictions_test = model.predict(X_test)

    mse_test = mean_squared_error(y_test, predictions_test)
    r2_test = r2_score(y_test, predictions_test)

    results[kernel] = {'MSE': mse_test, 'R-squared': r2_test}

for kernel, result in results.items():
    print(f"Results for {kernel} kernel:")
    print(f"MSE: {result['MSE']:.2f}, R-squared: {result['R-squared']:.2f}")
    print()

best_kernel = max(results, key=lambda k: results[k]['R-squared'])
predictions_test_best_kernel = make_pipeline(StandardScaler(), SVR(kernel=best_kernel, C=100, gamma=0.1, epsilon=0.1)).fit(X_train, y_train).predict(X_test)
plt.figure(figsize=(12, 6))
plt.plot(data['Date'].iloc[:len(y_test)], y_test, color='green', label='Actual Close Price (Test)')
plt.plot(data['Date'].iloc[:len(predictions_test_best_kernel)], predictions_test_best_kernel, color='blue', label=f'Predicted Close Price (Test) - {best_kernel} kernel')
plt.title(f'SVM with {best_kernel.capitalize()} Kernel (Test Data)\nMSE: {results[best_kernel]["MSE"]:.2f}, R-squared: {results[best_kernel]["R-squared"]:.2f}')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()
